/************************************************************************/
/*           通用工具类 V1.0											*/
/*								--for vs2005
*								--by renaissancer(xgz)					*/
/************************************************************************/

#ifndef _COMMON_TOOL_BOX_
#define _COMMON_TOOL_BOX_

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_DEPRECATE

#define  STRBUFF  120
#define TIME_LEN 20


#include <exception>
#include <string>
#include <iostream>
//#include <regex>
#include <sstream>
#include <cmath>
#include <float.h>
#include <vector>
#include <algorithm>
#include <set>
//#include <chrono>
#include <ctime>
#include <Windows.h>


/**
* @description	: 取整型的每个位,最低位从0开始.
* @param		: x:原始整数, y:第y位
* @return		: 返回x的第y+1 位上的数字.
* @exception	:
*/
#define getBit(x,y)   ((x) >> (y)&1) 

/**
* @description	: 浮点型转字符串
* @param		: des:接收的字符数组, src: 浮点型数据, N: 保留小数点位数
* @return		: 对应字符串型数据
*/
#define FLOAT_STRING(SRC,DES,N)  sprintf(DES,"%."#N"f",SRC)


/// 浮点数0
#define  FLOAT_ZERO  0.00000000000000001


/**
* @description	: 整型转字符串, 宽度为N
* @param		: des:接收的字符数组, src: 整型数据, N: 宽度, 若N>src位数,左边补0
* @return		: 对应字符串型数据
*/
#define INTEGER_STRING(SRC,DES,N)  sprintf(DES,"%0"#N"d",SRC) \
								   return DES


namespace uni_box
{

	namespace coding
	{
		//using namespace std;
		//utf8 转 Unicode  
		inline std::wstring Utf82Unicode(const std::string& utf8string)
		{
			int widesize = ::MultiByteToWideChar(CP_UTF8, 0, utf8string.c_str(), -1, NULL, 0);
			if (widesize == ERROR_NO_UNICODE_TRANSLATION)
			{
				throw std::exception("Invalid UTF-8 sequence.");
			}
			if (widesize == 0)
			{
				throw std::exception("Error in conversion.");
			}

			std::vector<wchar_t> resultstring(widesize);

			int convresult = ::MultiByteToWideChar(CP_UTF8, 0, utf8string.c_str(), -1, &resultstring[0], widesize);

			if (convresult != widesize)
			{
				throw std::exception("La falla!");
			}

			return std::wstring(&resultstring[0]);
		}


		//unicode 转为 ascii  


		inline	std::string WideByte2Acsi(std::wstring& wstrcode)
		{
			int asciisize = ::WideCharToMultiByte(CP_OEMCP, 0, wstrcode.c_str(), -1, NULL, 0, NULL, NULL);
			if (asciisize == ERROR_NO_UNICODE_TRANSLATION)
			{
				throw std::exception("Invalid UTF-8 sequence.");
			}
			if (asciisize == 0)
			{
				throw std::exception("Error in conversion.");
			}
			std::vector<char> resultstring(asciisize);
			int convresult = ::WideCharToMultiByte(CP_OEMCP, 0, wstrcode.c_str(), -1, &resultstring[0], asciisize, NULL, NULL);

			if (convresult != asciisize)
			{
				throw std::exception("La falla!");
			}

			return std::string(&resultstring[0]);
		}


		inline std::string UTF_82ASCII(std::string& strUtf8Code)
		{
			std::string strRet("");
			//先把 utf8 转为 unicode  
			std::wstring wstr = Utf82Unicode(strUtf8Code);
			//最后把 unicode 转为 ascii  
			strRet = WideByte2Acsi(wstr);
			return strRet;
		}
	}

	/// @brief 常用工具类集合
	namespace utils
	{
		/**
		* @description	: 格式化字符串,返回格式化后的 std::string 对象
		* @param		: fmt: 表示格式化字符.
		* @return		: 格式化后的 std::string 对象
		* @exception	: 如果规定的格式化符号与实际参数的类型不匹配,行为未定义.
		* @note			: 尤其注意: 若 %f 对应 12.0f 而不是 12
		* @sites		: https://en.cppreference.com/w/cpp/chrono/system_clock/formatter#Format_specification
		*/
		template<class... T>
		std::string format(const char* fmt, const T&...t)
		{
			const auto len = snprintf(nullptr, 0, fmt, t...);
			if (len <= 0)
			{
				throw std::runtime_error("Error during formatting.[uni_box::utils::format()]");
			}
			std::string r;
			r.resize(static_cast<size_t>(len) + 1);
			snprintf(&r.front(), len + 1, fmt, t...);  // Bad boy
			r.resize(static_cast<size_t>(len));
			return r;
		}



		/// <summary>
		/// 将字符串解析为指定格式的浮点数;
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="str"></param>
		/// <param name="format"></param>
		/// <returns></returns>
		template <typename T>
		inline T parseStringToNumber(const char* str, const char* format)
		{
			T result = 0;
			int integerPartLength = 0;
			int decimalPartLength = -1;
			int integerPartValue = 0;
			int decimalPartValue = 0;

			// Determine the length of the integer and decimal parts in the format string
			for (int i = 0; i < strlen(format); i++)
			{
				if (format[i] == '0')
				{
					if (decimalPartLength >= 0)
					{
						decimalPartLength++;
					}
					else
					{
						integerPartLength++;
					}
				}
				else if (format[i] == '.')
				{
					decimalPartLength = 0;
				}
			}

			// Parse the integer part of the input string
			//if (str.length() >= integerPartLength)
			if (strlen(str) >= integerPartLength)
			{
				for (int i = 0; i < integerPartLength; i++)
				{
					int digitValue = str[i] - '0';
					integerPartValue += digitValue * pow(10, integerPartLength - i - 1);
				}
			}
			else
			{
				throw std::invalid_argument("Input string is too short for the specified format.");
			}

			// Parse the decimal part of the input string
			if (decimalPartLength > 0)
			{
				int decimalStartIndex = integerPartLength;
				int decimalEndIndex = integerPartLength + decimalPartLength;

				if (strlen(str) >= decimalEndIndex)
					//if (str.length() >= decimalEndIndex)
				{
					for (int i = decimalStartIndex; i < decimalEndIndex; i++)
					{
						int digitValue = str[i] - '0';
						decimalPartValue += digitValue * pow(10, decimalEndIndex - i - 1);
					}

					result = integerPartValue + decimalPartValue / pow(10, decimalPartLength);
				}
				else
				{
					throw std::invalid_argument("Input string is too short for the specified format2.");
				}
			}
			else
			{
				result = integerPartValue;
			}

			return result;
		}


		/// <summary>
		/// 获取数组个数
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="src"></param>
		/// <returns></returns>
		template <typename T, size_t N>
		inline	size_t getArraySize(T(&src)[N])
		{
			return sizeof(src);
		}


		/// <summary>
		/// 将input末尾加上空终止符,并copy到output中;
		/// output长度要大于length
		/// </summary>
		/// <param name="input"></param>
		/// <param name="output"></param>
		/// <param name="length">input的长度</param>
		/// <returns></returns>
		inline	char* AppendNullTerminator(const char* input, char* output, size_t length)
		{
			std::memset(output, 0x00, length);
			std::memcpy(output, input, length);
			output[length] = '\0';
			return output;
		}


		/// <summary>
		/// 向dest中, 填充指定个数的ele元素;
		/// 需要人工保证,dest 大小 >= size,否则未定义;
		/// </summary>
		/// <param name="ele">填充元素</param>
		/// <param name="size">填充个数:若size = 数组大小,则数组最后一字节被ele填充,无'\0'结束符</param>
		/// <param name="dest">待填充的数组</param>
		/// <returns></returns>
		inline void PaddingElement(const char ele, int size, char dest[])
		{
			//for (size_t i = 0; i < size; i++)
			//{
			//	dest[i] = ele;
			//}
			memset(dest, ele, size);
		}

		/**
		* @description	: 分割字符串
		* @param		: s:带分离字符串; tokens: 存储分割后的字符串容器; delimiters: 正则表达式
		* @return		:
		* @exception	:
		*/
		inline	void split(const std::string& s, std::vector< std::string>& tokens, const std::string& delimiters = "$")
		{
			std::string::size_type lastPos = s.find_first_not_of(delimiters, 0);
			std::string::size_type pos = s.find_first_of(delimiters, lastPos);
			while (std::string::npos != pos || std::string::npos != lastPos) {
				tokens.push_back(s.substr(lastPos, pos - lastPos));//use emplace_back after C++11
				lastPos = s.find_first_not_of(delimiters, pos);
				pos = s.find_first_of(delimiters, lastPos);
			}
		}


		/**
		* @description	: char 和 wchar 类型互转
		* @param		:
		* @return		:
		* @exception	:
		*/
		inline int Wchar2Char(char* charStr, const wchar_t* wcharStr) {
			int len = WideCharToMultiByte(CP_ACP, 0, wcharStr, wcslen(wcharStr), NULL, 0, NULL, NULL);
			WideCharToMultiByte(CP_ACP, 0, wcharStr, wcslen(wcharStr), charStr, len, NULL, NULL);
			charStr[len] = '\0';
			return len;
		}

		inline	int Char2Wchar(wchar_t* wcharStr, const char* charStr) {
			int len = MultiByteToWideChar(CP_ACP, 0, charStr, strlen(charStr), NULL, 0);

			MultiByteToWideChar(CP_ACP, 0, charStr, strlen(charStr), wcharStr, len);
			wcharStr[len] = '\0';
			return len;
		}


		/**
		* @description	: 查找vector中重复元素
		* @param		: 带查找vector, 不能是字符串:char* , string
		* @return		: 重复元素的集合
		* @exception	:
		*/
		template<typename T>
		inline std::set<T> findDuplicates(std::vector<T> vec)        // 无引用，无常量
		{
			std::set<int> duplicates;
			std::sort(vec.begin(), vec.end());
			std::set<int> distinct(vec.begin(), vec.end());
			std::set_difference(vec.begin(), vec.end(), distinct.begin(), distinct.end(),
				std::inserter(duplicates, duplicates.end()));
			return duplicates;
		}

		/**
		* @description	: 任意基本类型转换为string
		* @param		: t:任意数值类型之引用
		* @return		: string类型数值
		* @exception	:
		*/
		template<typename T>
		inline std::string TtoStr(const T& t)
		{
			std::ostringstream oss;
			oss << t;
			return oss.str();
		}

		/**
		* @description	: 保留N小数(四舍五入): 注意:cout有默认精度(.2),建议采用printf打印.
		* @param		: dst:原始数值之引用, N:保留位数
		* @return		: dst(.N)
		* @exception	:
		*/
		template<typename T, unsigned short N>
		inline T setPrecision(T& dst)
		{
			dst = floor(dst * pow(10.0, N) + 0.5) / pow(10.0, N);
			return dst;
		}


		/**
		* @description	:	string --> 任意基本类型: 对于浮点数建议采用double而非float.
		* @param		:	str:原始字符串型数值之引用, T:目标类型
		* @return		:	类型为T的值t
		* @exception	:	若以字母开头,则会溢出.
		*/
		template<typename T>
		inline T StrtoT(const std::string& str)
		{
			T t;
			std::istringstream iss(str);
			iss >> t;
			return t;
		}

		/**
		* @description  :	string --> 任意基本类型: 对于浮点数建议采用double而非float.
		* @param		:	chr:原始字符数组, T:目标类型
		* @return		:	类型为T的值t
		* @exception	:	若以字母开头,则会溢出.
		*/
		template<typename T>
		inline T StrtoT(const char* chr)
		{
			T t;
			std::string temp_str(chr);
			std::istringstream iss(temp_str);
			iss >> t;
			return t;
		}


		/// <summary>
		/// 根据精度 precision 从字符串src中解析成指定T类型数据
		/// 注意: src 必须以 null 结尾;
		/// </summary>
		/// <typeparam name="T">指定转换类型</typeparam>
		/// <param name="src">字符串数字: "112000"</param>
		/// <param name="precision">精度: 将src转为T类型,在除以precision</param>
		/// <returns></returns>
		//template<typename T>
		//typename std::enable_if<std::is_arithmetic<T>::value>::T
		inline double Str2TWithPrecision(const char* src, size_t precision)
		{
			return (double)(StrtoT<double>(src) / precision);
		}

		/**
		* @description	: 获取当前时间,按指定格式输出s.
		* @general		: T: 表curTime类型, 限制为char*, char[]; N为对应其大小.
		* @param		: format:默认输出格式:char[20]=2021-12-06 10:56:53
		* @return		: string类型当前时间
		* @exception	:
		*/
		template<unsigned int N>
		inline void transMonth2Char(char* month_)
		{
			memset(month_, 0x00, N);
			uni_box::time_tools::getCurrentTime(month_, "%m");

			if (!strcmp("10", month_))
				sprintf_s(month_, N, "%s", "A");
			else if (!strcmp("11", month_))
				sprintf_s(month_, N, "%s", "B");
			else if (!strcmp("12", month_))
				sprintf_s(month_, N, "%s", "C");
			else
			{
				for (unsigned int i = 0; i < N - 1; ++i)
				{
					month_[i] = month_[i + 1];
				}
			}
		}

		template<typename T>
		inline bool CharNonEmptyCheck(const T& t1)
		{
			std::cout << (typeid(t1).name()) << ":" << t1 << std::endl;
			//char
			if (std::strncmp("char", typeid(t1).name(), 4) == 0)
			{
				// 判断char* or char[] 是否为空
				if (t1 == NULL || t1[0] == '\0' || strlen(t1) < 1)
				{
					return false;
				}

				else return true;
			}

			return false;
		}


		/// @brief 检查数字型值是否有效: 建议使用StrtoT将其转换下;
		/// @tparam T 检查类型
		/// @param t1 待检查参数
		/// @param min_value 下界
		/// @param max_value 上界
		/// @param overlap 重叠标志，true：允许max_value == min_value
		/// @return t1在上下界内返回true ;[min_value,max_value] if( min_value==max_value && overlap=true)  return true else false
		template<typename T>
		inline bool NumberNonEmptyCheck(const T&& t1, T min_value = static_cast<T>(0), T max_value = static_cast <T>(999999), bool overlap = true)
		{
			std::cout << (typeid(t1).name()) << ":" << t1 << std::endl;

			if (max_value < min_value)
			{
				printf("%s\n", "最大值无效，不能小于下限值~");
				//throw "最大值无效，不能小于下限值~";
				return false;
			}
			if (!overlap && (max_value == min_value))
			{
				printf("%s\n", "最大值无效，不能等于下限值~");
				return false;
			}
			if ((std::strncmp("float", typeid(t1).name(), 5) == 0) || (std::strncmp("double", typeid(t1).name(), 6) == 0))
			{
				//std::cout << min_value << std::endl;
				//printf("%.20f\n", min_value);

				if ((t1 >= min_value) && (t1 <= max_value))
				{
					return true;
				}
				else return false;
			}
			else
				//if (std::strncmp("int",typeid(t1).name(),3) == 0)
			{
				if (t1 >= min_value && t1 <= max_value)
				{
					return true;
				}
				else return false;
			}
		}


		/**
		* @description	: 右侧补充0
		* @param		: src 输入参数,  des:补全后的输出目的地. len: 补全后的总长度.
		* @return		: des
		* @exception	: Buffer too small
		* @note			: len 必须小于 des[]的长度.否则抛出run-time 错误. 不保证边界校验.
		*/
		inline char* AddRightZero2Str(const char* src, char des[], size_t len)
		{

			char temp[STRBUFF];
			memset(temp, 0x00, STRBUFF);

			size_t   need_len = 0;

			if (src == NULL /*|| strlen (des) > len*/)
			{
				return NULL;
			}

			//sprintf(des,"%s",src);
			sprintf(temp, "%s", src);

			//strlen 不包含空字符的长度
			size_t cur_len = strlen(src);
			need_len = len - cur_len;

			if (need_len > len) return NULL;

			for (size_t i = 0; i < need_len; ++i)
			{
				//从cur_len之后开始填充
				sprintf(temp + cur_len + i, "%s", "0");
			}
			//若传来的src为零
			//if (strlen(src) < 1)
			sprintf_s(des, len + 1, "%s", temp);
			//else
			//sprintf(des,"%s",temp,src);

			return des;
		}

		/**
		* @description	: 左侧补充0
		* @param		: src 输入参数,  des:补全后的输出目的地. len: 补全后的总长度(不含末位空字符).
		* @return		: void
		* @exception	:
		* @note			: len 必须小于 des[]的长度.否则抛出run-time 错误.
		*/
		inline char* AddLeftZero2Str(char* src, char des[], size_t len)
		{
			char temp[STRBUFF];
			memset(temp, 0x00, STRBUFF);

			size_t  need_len = 0;
			if (src == NULL || (*src == '\0'))
			{
				return NULL;
			}
			//sprintf(temp,"%s",src);
			//strlen 不包含空字符的长度
			need_len = len - strlen(src);
			if (need_len > len) return NULL;

			for (size_t i = 0; i < need_len; ++i)
			{
				sprintf(temp + i, "%s", "0");
			}
			strncat(temp, src, strlen(src));
			sprintf(des, "%s", temp);
			return des;
		}


		/**
		* @description	: 长度校验:字符串, 整型, 浮点型
		* @param		: t 输入参数,  len: 要求的长的
		* @return		: if (size <= len) return  true
		* @exception	:
		* @note			: 其中若为浮点型,则小数点也算一个长度.
		*/
		template<typename T>
		inline bool CheckLenValid(T t, size_t len)
		{
			std::string  str_ = uni_box::utils::TtoStr(t);
			if (str_.length() > len)
			{
				std::cout << str_.length() << std::endl;
				return false;
			}
			else
				return true;
		}

		/// <summary>
		/// t.len ∈ (min_len,max_len)
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="t"></param>
		/// <param name="max_len"></param>
		/// <param name="min_len"></param>
		/// <returns></returns>
		template<typename T>
		inline bool CheckLenValid(T&& t, size_t max_len, size_t min_len)
		{
			std::string  str_ = uni_box::utils::TtoStr(t);
			if ((str_.length() > max_len) || (str_.length() < min_len))
			{
				std::cout << str_.length() << std::endl;
				return false;
			}
			else
				return true;
		}

		/**
		* @description	: 保存数据datas至文件path中.
		* @param		: datas 数据,  path: 文件全路径
		* @return		: bool
		* @exception	:
		* @note			: 其中若为浮点型,则小数点也算一个长度.
		*/
		inline void saveData2File(const char* datas, const char* path)
		{
			FILE* f;
			if ((f = fopen(path, "a+")) != NULL)
			{
				//char cur_time[20];
				//getCurrentTime<sizeof(cur_time)>(cur_time);
				//fprintf(f, cur_time);
				//fprintf(f, "\n");
				fprintf(f, datas);
				fprintf(f, "\n");
				fflush(f);
				fclose(f);
			}
		}




		/**
		* @description	: 去除字符串首尾空格
		* @param		: s：含空格的字符串
		* @return		: 返回该字符串
		* @exception	:
		* @note			:
		*/
		inline	std::string& trim(std::string& s)
		{
			if (s.empty())
			{
				return s;
			}
			s.erase(0, s.find_first_not_of(" "));
			s.erase(s.find_last_not_of(" ") + 1);
			return s;
		}

		/**
		* @description	: 去除尾部指定符号
		* @param		: symbol:指定符号的ASCII码（空格：32）
		* @return		: 返回该字符串
		* @exception	:
		* @note			:
		*/
		inline char* rtrim(char* str, int symbol)
		{
			if (str == NULL || *str == '\0')
			{
				return str;
			}
			int len = strlen(str);
			char* p = str + len - 1;
			while (p >= str && ((int)(*p) == symbol))
			{
				*p = '\0'; --p;
			}
			return str;
		}


		/**
		* @description	: 去除首部指定符号
		* @param		: ascii_code:指定符号的ASCII码（空格：32）
		* @return		: 返回该字符串
		* @exception	:
		* @note			:
		*/
		inline char* ltrim(char* str, int symbol)
		{
			if (str == NULL || *str == '\0')
			{
				return str;
			}
			int len = 0;
			char* p = str;
			while (*p != '\0' && ((int)(*p) == symbol))
			{
				++p; ++len;
			}
			memmove(str, p, strlen(str) - len + 1);
			return str;
		}



		/**
		* @description	: 去除首尾指定符号
		* @param		: ascii_code:指定符号的ASCII码（空格：32）
		* @return		: 返回该字符串
		* @exception	:
		* @note			:
		*/
		inline char* trim(char* str, int symbol)
		{
			if (str == NULL || *str == '\0')
			{
				return str;
			}
			str = rtrim(str, symbol);
			str = ltrim(str, symbol);
			return str;
		}

		/**
	* @description	: 去除尾部指定符号
	* @param		: symbol:指定符号的ASCII码（空格：32）
	* @return		: 返回该字符串
	* @exception	:
	* @note			:
	*/
		inline char* trimEnder(char* str)
		{
			if (str == NULL)
			{
				std::cerr << "为空" /*<< endl*/;
				return str;
			}
			int len = strlen(str);
			char* p = str + len + 1;
			if (*p = '\0')
			{
				--p;
			}
			return str;
		}

#define REMOVE_HEAD_SYMBOL  1
#define REMOVE_TAIL_SYMBOL  2
#define REMOVE_HEAD_TAIL_SYMBOL  0
		/**
		* @description	: 去除首尾指定符号
		* @param		: ascii_code:指定符号的ASCII码（空格：32）；head_tail：0：去除首尾指定符号，1：去除头部指定符号
		* @return		: 返回该字符串
		* @exception	:
		* @note			:  标准的空白字符包括：
		*				   ' '     (0x20)    space (SPC) 空格符
		*				   '\t'    (0x09)    horizontal tab (TAB) 水平制表符
		*				   '\n'    (0x0a)    newline (LF) 换行符
		*				   '\v'    (0x0b)    vertical tab (VT) 垂直制表符
		*			       '\f'    (0x0c)    feed (FF) 换页符
		*				   '\r'    (0x0d)    carriage return (CR) 回车符
		*				   //windows \r\n linux \n mac \r
		*/

		inline	char* trimSymbol(char* src, int ascii_code, int head_tail = 0)
		{

			if (src == NULL || *src == '\0')
			{
				return src;
			}

			int sym_count = 0;

			//1:去除头尾指定符号
			switch (head_tail)
			{

			case REMOVE_HEAD_SYMBOL:
			{
				return ltrim(src, ascii_code);
			}
			break;

			case REMOVE_TAIL_SYMBOL:
			{
				src = rtrim(src, ascii_code);
				return src;
			}
			break;
			case REMOVE_HEAD_TAIL_SYMBOL:
			{
				return trim(src, ascii_code);
			}
			break;
			default:
				printf("error: case:%d", head_tail);
				break;
			}

		}
	}


	/// @brief 时间类工具箱
	namespace time_tools
	{
		/**
		* @description	: 获取当前时间,按指定格式输出s.
		* @general		: T: 表curTime类型, 限制为char*, char[]; N为对应其大小.
		* @param		: format:默认输出格式:char[N]=2021-12-06 10:56:53
		* @return		: string类型当前时间
		* @exception	: range_error
		*/
		inline std::string getCurrentTime(char* curTime, const char* format = "%Y-%m-%d %H:%M:%S")
		{
			memset(curTime, 0x00, TIME_LEN);

			char 		current_sec[TIME_LEN];
			time_t      seconds;
			tm* today;

			time(&seconds);
			today = localtime(&seconds);
			memset(current_sec, 0x00, sizeof(current_sec));
			strftime(current_sec, sizeof(current_sec), format, today);
			//将 current_sec N-1 个字节写入 curTime. 最后添加空终止符.
			int res = sprintf_s(curTime, TIME_LEN, "%s", current_sec);
			return curTime;
		}


		/**
		* @description	: 获取当前时间,按指定格式输出s.
		* @general		: T: 表curTime类型, 限制为char*, char[]; N为对应其大小.
		* @param		: format:默认输出格式:char[N]=2021-12-06 10:56:53
		* @return		: string类型当前时间
		* @exception	: range_error
		*/
		inline std::string getCurrentTime(const char* format = "%Y-%m-%d %H:%M:%S")
		{
			char 		current_sec[TIME_LEN];
			time_t      seconds;
			tm* today;

			time(&seconds);
			today = localtime(&seconds);
			memset(current_sec, 0x00, sizeof(current_sec));
			strftime(current_sec, sizeof(current_sec), format, today);
			//将 current_sec N-1 个字节写入 curTime. 最后添加空终止符.
			return current_sec;
		}

		/**
		* @description	: 将时间戳转为时间字符串, 精确到秒
		* @param		: timeStamp:时间戳
		* @return		: time_t 类型时间戳
		* @exception	: 如果传入参数格式出错,则抛出异常
		* @note			: 注意时间字符串格式
		*/
		inline std::string TimeStamp2Str(time_t timeStamp) {
			struct tm* timeinfo = NULL;
			char buffer[80];
			timeinfo = localtime(&timeStamp);
			strftime(buffer, 80, "%Y-%m-%d %H:%M:%S", timeinfo);
			//printf("%s\n", buffer);
			return std::string(buffer);
		}


		/**
		* @description	: 将时间字符串转为时间戳, 精确到秒
		* @param		: str:时间字符串,格式:2022-07-21 11:01:50
		* @return		: time_t 类型时间戳
		* @exception	: 如果传入参数格式出错,则抛出异常
		* @note			: 注意时间字符串格式
		*/
		inline time_t StringToTimeStamp(std::string str) {
			struct tm tm_;
			int year, month, day, hour, minute, second;
			try
			{
				sscanf(str.c_str(), "%d-%d-%d %d:%d:%d", &year, &month, &day, &hour, &minute, &second);
				tm_.tm_year = year - 1900;
				tm_.tm_mon = month - 1;
				tm_.tm_mday = day;
				tm_.tm_hour = hour;
				tm_.tm_min = minute;
				tm_.tm_sec = second;
				tm_.tm_isdst = 0;
			}
			catch (std::invalid_argument& e)
			{
				std::cout << "传入参数 str 格式错误: " << e.what() << std::endl;
			}

			time_t timeStamp = mktime(&tm_);
			return timeStamp;
		}



		/// @brief months since January - [1, 12]
		/// @return months since January - [1, 12]
		inline int getCurMonth()
		{
			time_t      seconds;
			tm* today;
			time(&seconds);
			today = localtime(&seconds);
			//cout << today->tm_year + 1900 << endl;
			//cout << today->tm_yday << endl;
			return (today->tm_mon + 1);
		}

		/// @brief day of the month - [1, 31]
		/// @return day of the month - [1, 31]
		inline int getCurDay()
		{
			time_t      seconds;
			tm* today;
			time(&seconds);
			today = localtime(&seconds);
			//cout << today->tm_year + 1900 << endl;
			//cout << today->tm_yday << endl;
			return (today->tm_mday);
		}

		/// @brief days since January 1 - [0, 365]
		inline int	getYday()
		{
			time_t      seconds;
			tm* today;
			time(&seconds);
			today = localtime(&seconds);
			//cout << today->tm_year + 1900 << endl;
			//cout << today->tm_yday << endl;
			return today->tm_yday;
		}

		inline int	getCurHour()
		{
			time_t      seconds;
			tm* today;
			time(&seconds);
			today = localtime(&seconds);
			//cout << today->tm_year + 1900 << endl;
			//cout << today->tm_yday << endl;
			return (today->tm_hour);
		}

		inline int	getCurMinute()
		{
			time_t      seconds;
			tm* today;
			time(&seconds);
			today = localtime(&seconds);
			//cout << today->tm_year + 1900 << endl;
			//cout << today->tm_yday << endl;
			return (today->tm_min);
		}

	}


	/// @brief 算法工具类
	namespace algorithm
	{
	}


	enum host_endian
	{
		LittleEndian = 0, BigEndian = 1, UnkownEndian = 2
	};

	/// @brief 网络通信类
	namespace net
	{
#define MAGIC 0x12345678

		/// <summary>
		/// get the byte order of current host
		/// </summary>
		/// <returns>enum host_endian</returns>
		inline host_endian getCurHostEndian()
		{
			// 判断当前主机字节序是否为小端字节序
			static const uint16_t value = 0x0001;
			if (reinterpret_cast<const uint8_t*>(&value)[0] == 0x01)
			{
				return LittleEndian;
			}
			else
				return BigEndian;

			/*uint32_t value = MAGIC;
			uint8_t* p = reinterpret_cast<uint8_t*>(&value);
			if (*p == 0x78 && *(p + 1) == 0x56 && *(p + 2) == 0x34 && *(p + 3) == 0x12)
			{
				return LittleEndian;
			}
			else if (*p == 0x12 && *(p + 1) == 0x34 && *(p + 2) == 0x56 && *(p + 3) == 0x78)
			{
				return BigEndian;
			}
			else
			{
				return UnkownEndian;
			}*/
		}


		/// <summary>
		/// Converting host byte order to Little endian 
		/// </summary>
		/// <typeparam name="T">data type</typeparam>
		/// <param name="value">data</param>
		template <typename T>
		inline void to_little_endian(T& value)
		{
			// Check if the current platform is already little endian
			static const int endian_check = 1;
			if (*(reinterpret_cast<const char*>(&endian_check)) != 1)
			{
				// If not, swap the byte order of the value
				uint8_t temp[sizeof(T)];
				memcpy(temp, &value, sizeof(T));
				for (std::size_t i = 0; i < sizeof(T); ++i)
				{
					reinterpret_cast<char*>(&value)[i] = temp[sizeof(T) - 1 - i];
				}
			}
			else
				std::cerr << "This is already little endian ~" << std::endl;
		}

		/// <summary>
		/// 将主机字节序转换为大端字节序;
		/// 大端字节序（Big-Endian）指的是高位字节存储在内存的低地址处，低位字节存储在内存的高地址处，这样的存储方式类似于书写时从左到右的顺序。
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="value">要转换的数据流</param>
		template<typename T>
		inline void to_big_endian(T& value) {
			// 如果当前主机字节序为大端字节序，则直接返回原数据
			if (getCurHostEndian() != BigEndian)
			{
				// 使用指针运算将结构体转换为 char 数组
				uint8_t* ptr = reinterpret_cast<uint8_t*>(&value);

				// 反转数组中的每个元素
				for (size_t i = 0; i < sizeof(T) / 2; i++)
				{
					char temp = ptr[i];
					ptr[i] = ptr[sizeof(T) - i - 1];
					ptr[sizeof(T) - i - 1] = temp;
				}
			}
			else
				std::cerr << "This is already big endian ~" << std::endl;
		}
	}

}

#endif